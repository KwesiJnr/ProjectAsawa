
// Calculate grid columns
@for $i from 1 through $g-col-c {
  $cont: g-context($g-col-w, $g-col-c, $g-gutter-w);
  $tar: ($g-col-w * $i) + ($g-gutter-w * ($i - 1));

  // generate column modifier classes
  .grid__col--#{$i} {
    width: percentage($tar / $cont);
  }
}



// ==========================================================================
// BEM Naming Functions
// ==========================================================================
// Element Mixin
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

// Modifier Mixin
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Generate color modifier classes
@mixin btn-bg ($color-map) {
  @each $theme, $color in $color-map {
    $lightcolor: nth($color, 1);
    $deepcolor: nth($color, 2);
    $textColor: nth($color, 3);

    &--#{$theme} {
      background-color: $deepcolor;
      color: $textColor;

      &:hover {
        background: ease-in-out-quad-gradient(to right, $lightcolor, $deepcolor);
      }
    }
  }
}


// Generate ::before or ::after pseudo-element shapes
@mixin p-el($el-name, $h: 'null', $w: 'null') {
  @if $el-name == 'before' or $el-name == 'after' {
    &::#{$el-name} {
      @extend %pseudos;
      width: $w;
      height: $h;
      @content;
    }
  }
  @else {
    @error '"#{$el-name}" is not a valid pseudo element.';
  }
}

// ==========================================================================
// Media Query Functions
// ==========================================================================
@mixin media-q($break) {
  @if $break == 'min' {
    @media (min-width: $breakpoint-min) and (max-width: $breakpoint-sm) {
      @content;
    }
  } @else if $break == 'small' {
    @media (min-width: $breakpoint-sm) and (max-width: $breakpoint-md){
      @content;
    }
  } @else if $break == 'medium' {
    @media (min-width: $breakpoint-md + 1) {
      @content;
    }
  } @else if $break == 'large' {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else {
    @error '"#{$break}" is not a valid breakpoint value. Please re-assess and enter correct value (e.g. "small", "medium" or "large")';
  }
}

// ==========================================================================
// Gradient on Images
// ==========================================================================
@mixin image-gradient {
  @include p-el(before, 100%, 100%) {
    background-image: scrim-gradient(to bottom, rgba($black, .3), rgba($black, .6));
  }
}
